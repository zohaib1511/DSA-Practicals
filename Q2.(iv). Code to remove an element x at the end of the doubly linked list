#include <iostream>


struct Node {
    int data;
    Node* prev;
    Node* next;
    Node(int value) : data(value), prev(nullptr), next(nullptr) {}
};

class DoublyLinkedList {
private:
    Node* head; 

public:
    
    DoublyLinkedList() : head(nullptr) {}

    
    void removeFromEnd() {
    
        if (head == nullptr) {
            std::cout << "List is empty. Cannot remove from an empty list." << std::endl;
            return;
        }

    
        if (head->next == nullptr) {
            delete head;
            head = nullptr;
            return;
        }


        Node* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }

        
        Node* previous = current->prev;

    
        previous->next = nullptr;

    delete current;
    }
    void display() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }

        std::cout << std::endl;
    }
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
            newNode->prev = current;
        }
    }
};

int main() {

    DoublyLinkedList myList;
    myList.removeFromEnd(); 

    myList.insertAtEnd(3);
    myList.insertAtEnd(7);
    myList.insertAtEnd(1);
    std::cout << "Doubly Linked List: ";
    myList.display();

    myList.removeFromEnd();

    std::cout << "Doubly Linked List after removal: ";
    myList.display();

    return 0;
}
