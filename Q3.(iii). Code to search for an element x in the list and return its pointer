#include <iostream>

struct Node {
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

class CircularLinkedList {
private:
    Node* head; 

public:
    CircularLinkedList() : head(nullptr) {}

    void insert(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {
            head = newNode;
            head->next = head; 
        } else {
            Node* current = head;
            while (current->next != head) {
                current = current->next;
            }

            current->next = newNode;

            newNode->next = head;
        }
    }

    Node* search(int value) {
        if (head == nullptr) {
            return nullptr;
        }

        Node* current = head;

        do {
            if (current->data == value) {
                return current;
            }
            current = current->next;
        } while (current != head);
        return nullptr;
    }

    void display() {
        if (head == nullptr) {
            std::cout << "Circular Linked List is empty." << std::endl;
            return;
        }

        Node* current = head;

        do {
            std::cout << current->data << " ";
            current = current->next;
        } while (current != head);

        std::cout << std::endl;
    }
};

int main() {
    CircularLinkedList myList;
    myList.insert(3);
    myList.insert(7);
    myList.insert(1);
    std::cout << "Circular Linked List: ";
    myList.display();

    int searchValue = 7;
    Node* result = myList.search(searchValue);

    if (result != nullptr) {
        std::cout << "Element " << searchValue << " found at address: " << result << std::endl;
    } else {
        std::cout << "Element " << searchValue << " not found in the list." << std::endl;
    }

    return 0;
}
