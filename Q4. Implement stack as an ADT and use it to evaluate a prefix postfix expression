#include <iostream>
#include <stack>
#include <cmath>

class Stack {
private:
    std::stack<double> data;

public:
    void push(double value) {
        data.push(value);
    }

    double pop() {
        if (!data.empty()) {
            double top = data.top();
            data.pop();
            return top;
        }
        throw std::out_of_range("Stack is empty");
    }

    double top() const {
        if (!data.empty()) {
            return data.top();
        }
        throw std::out_of_range("Stack is empty");
    }

    bool empty() const {
        return data.empty();
    }
};

double evaluatePostfix(const std::string& expression) {
    Stack stack;
    for (char c : expression) {
        if (isdigit(c)) {
            stack.push(c - '0'); 
        } else {
            double operand2 = stack.pop();
            double operand1 = stack.pop();
            switch (c) {
                case '+':
                    stack.push(operand1 + operand2);
                    break;
                case '-':
                    stack.push(operand1 - operand2);
                    break;
                case '*':
                    stack.push(operand1 * operand2);
                    break;
                case '/':
                    stack.push(operand1 / operand2);
                    break;
                case '^':
                    stack.push(pow(operand1, operand2));
                    break;
                default:
                    throw std::invalid_argument("Invalid operator in postfix expression");
            }
        }
    }
    return stack.pop();
}

double evaluatePrefix(const std::string& expression) {
    Stack stack;
    for (int i = expression.length() - 1; i >= 0; --i) {
        char c = expression[i];
        if (isdigit(c)) {
            stack.push(c - '0'); // Convert character to integer
        } else {
            double operand1 = stack.pop();
            double operand2 = stack.pop();
            switch (c) {
                case '+':
                    stack.push(operand1 + operand2);
                    break;
                case '-':
                    stack.push(operand1 - operand2);
                    break;
                case '*':
                    stack.push(operand1 * operand2);
                    break;
                case '/':
                    stack.push(operand1 / operand2);
                    break;
                case '^':
                    stack.push(pow(operand1, operand2));
                    break;
                default:
                    throw std::invalid_argument("Invalid operator in prefix expression");
            }
        }
    }
    return stack.pop();
}

int main() {
    try {
        std::string postfixExpression = "23*5+";
        double resultPostfix = evaluatePostfix(postfixExpression);
        std::cout << "Result of postfix expression: " << resultPostfix << std::endl;
        std::string prefixExpression = "+*235";
        double resultPrefix = evaluatePrefix(prefixExpression);
        std::cout << "Result of prefix expression: " << resultPrefix << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
