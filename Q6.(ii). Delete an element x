#include <iostream>

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : data(value), left(nullptr), right(nullptr) {}
};

class BinarySearchTree {
private:
    TreeNode* root; 

public:
    BinarySearchTree() : root(nullptr) {}

    void remove(int value) {
        root = removeRecursive(root, value);
        std::cout << "Element " << value << " deleted from the Binary Search Tree." << std::endl;
    }

    TreeNode* removeRecursive(TreeNode* root, int value) {
        if (root == nullptr) {
            return root;
        }

        if (value < root->data) {
            root->left = removeRecursive(root->left, value);
        } else if (value > root->data) {
            root->right = removeRecursive(root->right, value);
        } else {
            if (root->left == nullptr) {
                TreeNode* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                TreeNode* temp = root->left;
                delete root;
                return temp;
            }

            root->data = minValue(root->right);

            root->right = removeRecursive(root->right, root->data);
        }

        return root;
    }

    int minValue(TreeNode* node) {
        int minValue = node->data;
        while (node->left != nullptr) {
            minValue = node->left->data;
            node = node->left;
        }
        return minValue;
    }
};

int main() {
    BinarySearchTree myBST;

    myBST.remove(30);

    myBST.remove(50); 
    myBST.remove(30); 
    myBST.remove(70); 

    return 0;
}
