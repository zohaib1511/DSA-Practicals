#include <iostream>

struct Node {
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

class CircularLinkedList {
private:
    Node* head; 

public:

    CircularLinkedList() : head(nullptr) {}

    // Function to insert an element x in the circular linked list
    void insert(int value) {
        
        Node* newNode = new Node(value);

        
        if (head == nullptr) {
            head = newNode;
            head->next = head; 
        } else {
          
            Node* current = head;
            while (current->next != head) {
                current = current->next;
            }

        
            current->next = newNode;

      
            newNode->next = head;
        }
    }

    
    void display() {
        
        if (head == nullptr) {
            std::cout << "Circular Linked List is empty." << std::endl;
            return;
        }

        Node* current = head;
        do {
            std::cout << current->data << " ";
            current = current->next;
        } while (current != head);

        std::cout << std::endl;
    }
};

int main() {
   
    CircularLinkedList myList;

    myList.insert(3);
    myList.insert(7);
    myList.insert(1);

    std::cout << "Circular Linked List: ";
    myList.display();

    return 0;
}
